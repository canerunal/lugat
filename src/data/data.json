[
  {
    "id": 1,
    "category": ["JavaScript"],
    "term": "Scope",
    "desc": "JavaScript'te 'scope' kavramı, bir değişkenin hangi kod bloğunda erişilebilir olduğunu belirler. Bir kod bloğu, genellikle süslü parantezler ({}) arasında yer alan ve belirli bir işlevi yerine getiren kod grubudur.",
    "example": {
      "codeBlock": "function scopeExample() {\n var x = 1; // x sadece bu fonksiyonun kapsamında erişilebilir\n console.log(x); // 1 yazdırılır\n}\n\nscopeExample();\nconsole.log(x); // hata verir, x is not defined\n"
    }
  },
  {
    "id": 2,
    "category": ["JavaScript"],
    "term": "Closure",
    "desc": "JavaScript'te 'closure' kavramı, iç içe fonksiyonlar arasındaki bağlantıyı ifade eder. Bir iç fonksiyon, dış fonksiyonun değişkenlerine erişebilir, ancak dış fonksiyon içinde tanımlanan değişkenlere dışarıdan erişilemez.",
    "example": {
      "codeBlock": "function outer() {\n var x = 10;\n function inner() {\n console.log(x);\n }\n return inner;\n}\n\nvar closureExample = outer();\nclosureExample(); // 10 yazdırılır\n"
    }
  },
  {
    "id": 3,
    "category": ["JavaScript"],
    "term": "Asenkron Programlama",
    "desc": "JavaScript'te 'asenkron programlama' kavramı, işlem sırasının sıralı olarak ilerlemesi yerine, işlemlerin belirli bir sırayla çalıştırılmadan önce tamamlanması ilkesine dayanır. Bu sayede, programda uzun süren işlemlerin yavaşlatması engellenir ve program daha hızlı çalışır.",
    "example": {
      "codeBlock": "function asyncExample() {\n console.log('Başla');\n setTimeout(function() {\n console.log('3 saniye sonra çalıştı');\n }, 3000);\n console.log('Bitir');\n}\n\nasyncExample();\n// 'Başla', 'Bitir', '3 saniye sonra çalıştı' şeklinde yazdırılır\n"
    }
  },
  {
    "id": 4,
    "category": ["React"],
    "term": "State",
    "desc": "State, React component'lerindeki verilerin depolanması ve yönetilmesi için kullanılan bir özelliktir. State, component'in özellikleri (props) gibi dışarıdan değil, component'in içinde tanımlanır ve değiştirilebilir.",
    "example": {
      "codeBlock": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function handleIncrement() {\n    setCount(count + 1);\n  }\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={handleIncrement}>Click me</button>\n    </div>\n  );\n}"
    }
  },
  {
    "id": 5,
    "category": ["React", "Vue.js"],
    "term": "Component",
    "desc": "React uygulamalarında UI’ı, birkaç parçaya bölerek, her parçayı tekrar kullanılabilir, bağımsız ve kolayca yönetilebilir hale getiren yapıdır.",
    "example": {
      "codeBlock": "class MyComponent extends React.Component {\n render() {\n return <h1>Hello, {this.props.name}</h1>;\n }\n}\n\nReactDOM.render(<MyComponent name='John' />, document.getElementById('root'));\n"
    }
  },
  {
    "id": 6,
    "category": ["React", "JavaScript"],
    "term": "Props",
    "desc": "React bileşenleri arasında veri iletmek için kullanılır. Veriler, bileşenin çağrıldığı yerden başka bir bileşene, özellikle ebeveyn bileşenlerden alt bileşenlere iletilir.",
    "example": {
      "codeBlock": "function Welcome(props) {\n return <h1>Hello, {props.name}</h1>;\n}\n\nconst element = <Welcome name='John' />;\nReactDOM.render(element, document.getElementById('root'));\n"
    }
  },
  {
    "id": 7,
    "category": ["CSS"],
    "term": "Box Model",
    "desc": "Box Model, her HTML öğesi için bir kutu modeli oluşturarak öğelerin boyutlandırılmasını ve yerleştirilmesini sağlayan bir CSS özelliğidir. Kutu modeli, içerik, dolgu, sınır ve kenar boşluğu olarak dört bileşenden oluşur.",
    "example": {
      "codeBlock": "/* Kutu modelindeki bileşenlerin genişlikleri ve yükseklikleri ayrı ayrı belirlenebilir. */\ndiv {\n  width: 200px;\n  height: 100px;\n  padding: 20px;\n  border: 1px solid black;\n  margin: 10px;\n}"
    }
  },
  {
    "id": 9,
    "category": ["React", "JavaScript"],
    "term": "JSX",
    "desc": "JSX, JavaScript sözdizimini genişleten bir XML benzeri sözdizimidir. React bileşenlerini tanımlamak ve bu bileşenlere özellikler ve çocuk bileşenler eklemek için kullanılır. JSX, React uygulamalarının okunaklılığını artırır ve hataları önceden tespit etmeye yardımcı olur.",
    "example": {
      "codeBlock": "function formatName(user) {\n return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n firstName: 'John',\n lastName: 'Doe'\n};\n\nconst element = <h1>Hello, {formatName(user)}!</h1>;\n\nReactDOM.render(\n element,\n document.getElementById('root')\n);"
    }
  },
  {
    "id": 10,
    "category": ["React"],
    "term": "Virtual DOM",
    "desc": "Virtual DOM, React'ın performansını artırmak için kullandığı bir tekniktir. React, bir bileşenin durumu değiştiğinde, önce sanal bir DOM ağacı oluşturur ve gerçek DOM ile karşılaştırır. Ardından, sadece değişen kısımları günceller ve gerçek DOM ağacını yeniden oluşturmak yerine bu değişiklikleri yansıtır. Bu işlem, gerçek DOM ağacını yeniden oluşturmaktan daha hızlıdır ve React uygulamalarının performansını artırır.",
    "example": {
      "codeBlock": "// Normal DOM:\n\n<div id='myDiv'>\n <p>Hello, world!</p>\n</div>\n\n// Virtual DOM:\n\n{\n type: 'div',\n props: {\n id: 'myDiv',\n children: [\n {\n type: 'p',\n props: {\n children: 'Hello, world!' }}]}}"
    }
  },
  {
    "id": 11,
    "category": ["JavaScript", "React", "Vue.js"],
    "term": "let",
    "desc": "'let' anahtar kelimesi, JavaScript'te yeni bir değişken tanımlamak için kullanılır. 'let' kullanarak tanımlanan değişkenler, sadece tanımlandıkları blok içinde erişilebilir ve dışarıya sızamazlar. Ayrıca, 'let' ile tanımlanan değişkenlerin değerleri sonradan değiştirilebilir.",
    "example": {
      "codeBlock": "let x = 5;\nconsole.log(x); // 5\n\n{\n let x = 10;\n console.log(x); // 10\n}\n\nconsole.log(x); // 5"
    }
  },
  {
    "id": 12,
    "category": ["JavaScript"],
    "term": "Hoisting",
    "desc": "Hoisting, JavaScript'te bir değişkenin ya da fonksiyonun tanımlanmasının, kodun çalıştırılması sırasında nereye konulduğundan bağımsız olarak, en üstteki blokta tanımlandığı varsayımıdır.",
    "example": {
      "codeBlock": "x = 5;\nconsole.log(x);\nvar x;"
    }
  },
  {
    "id": 13,
    "category": ["JavaScript", "React", "Vue.js"],
    "term": "Promise",
    "desc": "Promise, asenkron işlemleri kolaylaştırmak için JavaScript'te kullanılan bir nesnedir. Promise nesnesi, bir işlem tamamlandığında veya hata verdiğinde geri çağırma işlevlerini kullanarak işlemin sonucunu yönetir.",
    "example": {
      "codeBlock": "const fetchData = () => {\n return new Promise((resolve, reject) => {\n setTimeout(() => {\n resolve('Data fetched!');\n }, 2000);\n });\n}\n\nfetchData().then(data => console.log(data));"
    }
  },
  {
    "id": 14,
    "category": ["JavaScript"],
    "term": "Event Loop",
    "desc": "Event Loop, JavaScript'in asenkron çalışmasının temelidir. Event Loop, bir JavaScript programının çalıştığı ortamda, iş parçacıklarını yönetir ve ana iş parçacığı dışındaki işleri işlemek için bir sıra oluşturur.",
    "example": {
      "codeBlock": "console.log('start');\n\nsetTimeout(() => {\n console.log('setTimeout');\n}, 0);\n\nPromise.resolve().then(() => {\n console.log('Promise');\n});\n\nconsole.log('end');"
    }
  },
  {
    "id": 15,
    "category": ["JavaScript"],
    "term": "Spread Operator",
    "desc": "Spread Operator, bir dizi ya da nesne içindeki elemanları tek tek ayırarak yeni bir dizi ya da nesne oluşturur. Spread Operator, kodun daha okunaklı ve kısa olmasına yardımcı olur.",
    "example": {
      "codeBlock": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst newArr = [...arr1, ...arr2];\nconsole.log(newArr);\n\nconst obj1 = {a: 1, b: 2};\nconst obj2 = {c: 3, d: 4};\nconst newObj = {...obj1, ...obj2};\nconsole.log(newObj);"
    }
  },
  {
    "id": 16,
    "category": ["JavaScript"],
    "term": "Rest Parameter",
    "desc": "Rest Parameter, bir fonksiyona değişken sayıda argüman geçmek için kullanılır. Rest Parameter, argümanların bir dizi olarak toplanmasını sağlar.",
    "example": {
      "codeBlock": "function sum(...args) {\n return args.reduce((total, num) => total + num);\n}\n\nconsole.log(sum(1, 2, 3, 4));"
    }
  },
  {
    "id": 17,
    "category": ["JavaScript"],
    "term": "Local Storage",
    "desc": "Local Storage, bir web sayfasında, kullanıcının tarayıcısında verileri depolamak için kullanılır. Local Storage, anahtar-değer çiftleri halinde verileri saklar ve veriler tarayıcıyı kapatsanız bile kalıcıdır.",
    "example": {
      "codeBlock": "localStorage.setItem('username', 'John');\nconsole.log(localStorage.getItem('username'));\nlocalStorage.removeItem('username');"
    }
  },
  {
    "id": 18,
    "category": ["Web Development"],
    "term": "Session Storage",
    "desc": "Session Storage, bir web sayfasında, kullanıcının tarayıcısında verileri depolamak için kullanılır. Session Storage, Local Storage gibi çalışır ancak tarayıcı kapatıldığında veriler otomatik olarak silinir.",
    "example": {
      "codeBlock": "sessionStorage.setItem('username', 'John');\nconsole.log(sessionStorage.getItem('username'));\nsessionStorage.removeItem('username');"
    }
  },
  {
    "id": 19,
    "category": ["JavaScript"],
    "term": "Call Stack",
    "desc": "Call Stack, JavaScript'in fonksiyon çağrılarını izlediği veri yapısıdır. Bir fonksiyon çağrısı yapıldığında, bu çağrı Call Stack'e eklenir ve fonksiyonun tamamlanmasıyla birlikte Call Stack'den çıkarılır.",
    "example": {
      "codeBlock": "function first() {\n second();\n}\n\nfunction second() {\n third();\n}\n\nfunction third() {\n console.log('Hello, world!');\n}\n\nfirst();"
    }
  },
  {
    "id": 20,
    "category": ["JavaScript"],
    "term": "Higher-Order Function",
    "desc": "Higher-Order Function, bir fonksiyonun, diğer bir fonksiyonu parametre olarak alması veya bir fonksiyon döndürmesi durumudur. Bu özellik sayesinde, fonksiyonlar daha esnek ve yeniden kullanılabilir hale gelir.",
    "example": {
      "codeBlock": "function sayHello() {\n console.log('Hello, world!');\n}\n\nfunction repeat(func, n) {\n for(let i = 0; i < n; i++) {\n func();\n }\n}\n\nrepeat(sayHello, 3);"
    }
  },
  {
    "id": 21,
    "category": ["JavaScript"],
    "term": "ES6",
    "desc": "ES6, ECMAScript 2015 olarak da bilinen bir JavaScript sürümüdür. Bu sürüm, birçok yeni özellik ve geliştirme içermektedir, örneğin arrow functionlar, let ve const anahtar kelimeleri, template literals, destructuring, spread ve rest operatörleri gibi.",
    "example": {
      "codeBlock": "const sum = (a, b) => a + b;\nconst message = The sum of 2 and 3 is ${sum(2, 3)}.;\nlet arr = [1, 2, 3];\nlet [first, ...rest] = arr;\nconsole.log(first);\nconsole.log(rest);"
    }
  },
  {
    "id": 22,
    "category": ["JavaScript"],
    "term": "Destructuring",
    "desc": "Destructuring, JavaScript'te bir nesne veya dizi içindeki değerleri ayrıştırma işlemidir. Bu işlem, tek tek öğeleri elde etmek yerine nesne veya dizinin özelliklerine doğrudan erişmenizi sağlar.",
    "example": {
      "codeBlock": "// Destructuring with an object:\n\nconst person = { name: 'John Doe', age: 30 };\nconst { name, age } = person;\nconsole.log(name); // Output: John Doe\nconsole.log(age); // Output: 30\n\n// Destructuring with an array:\n\nconst numbers = [1, 2, 3];\nconst [first, second, third] = numbers;\nconsole.log(first); // Output: 1\nconsole.log(second); // Output: 2\nconsole.log(third); // Output: 3"
    }
  },
  {
    "id": 23,
    "category": ["JavaScript"],
    "term": "Template Literals",
    "desc": "Template Literals, ECMAScript 6 (ES6) ile birlikte gelen bir özelliktir ve string ifadelerini daha esnek hale getirir. Bu özellik, string ifadelerini tek tırnak veya çift tırnak içine almaktansa, backtick karakterleri (``) arasına almanıza izin verir ve içinde değişkenler veya ifadeler kullanmanızı sağlar.",
    "example": {
      "codeBlock": "const name = 'John';\nconst age = 30;\nconsole.log(My name is ${name} and I am ${age} years old.); // Output: My name is John and I am 30 years old."
    }
  },
  {
    "id": 24,
    "category": ["JavaScript"],
    "term": "Object Oriented Programming (OOP)",
    "desc": "Object Oriented Programming (OOP), JavaScript'te bir programın nesne ve sınıflar üzerine kurulmasını sağlayan bir programlama paradigmadır. Bu paradigmada, bir program birbirleriyle etkileşim halinde olan nesnelerin kümesinden oluşur ve her nesne bir sınıfın örneğidir.",
    "example": {
      "codeBlock": "class Person {\n constructor(name, age) {\n this.name = name;\n this.age = age;\n }\n\n sayHello() {\n console.log(Hello, my name is ${this.name} and I am ${this.age} years old);\n }\n}\n\nconst john = new Person('John', 30);\njohn.sayHello(); // Output: Hello, my name is John and I am 30 years old"
    }
  },
  {
    "id": 25,
    "category": ["JavaScript"],
    "term": "Prototype",
    "desc": "Prototype, JavaScript'teki nesne tabanlı programlama modelinde kullanılan bir özelliktir ve her nesnenin bir prototipi vardır. Bu özellik, bir nesnenin özellikleri veya metotlarına erişmek için kullanılır ve nesne tabanlı programlamada miras alma kavramını destekler.",
    "example": {
      "codeBlock": "function Person(name, age) {\n this.name = name;\n this.age = age;\n}\n\nPerson.prototype.sayHello = function() {\n console.log(Hello, my name is ${this.name} and I am ${this.age} years old);\n};\n\nconst john = new Person('John', 30);\njohn.sayHello(); // Output: Hello, my name is John and I am 30 years old"
    }
  },
  {
    "id": 26,
    "category": ["JavaScript"],
    "term": "Array Methods",
    "desc": "Array Methods, JavaScript'teki dizilerde kullanılan özel metodlardır ve dizilerin işlenmesini kolaylaştırır. Bu metodlar arasında, eleman ekleme ve silme, sıralama, filtreleme ve dönüştürme işlemleri bulunur.",
    "example": {
      "codeBlock": "// Adding elements\nconst arr = [1, 2, 3];\narr.push(4);\nconsole.log(arr); // Output: [1, 2, 3, 4]\n\n// Removing elements\nconst arr = [1, 2, 3];\narr.pop();\nconsole.log(arr); // Output: [1, 2]\n\n// Sorting elements\nconst arr = [3, 1, 2];\narr.sort();\nconsole.log(arr); // Output: [1, 2, 3]\n\n// Filtering elements\nconst arr = [1, 2, 3];\nconst filteredArr = arr.filter(item => item > 1);\nconsole.log(filteredArr); // Output: [2, 3]\n\n// Transforming elements\nconst arr = [1, 2, 3];\nconst transformedArr = arr.map(item => item * 2);\nconsole.log(transformedArr); // Output: [2, 4, 6]"
    }
  },
  {
    "id": 27,
    "category": ["CSS"],
    "term": "Flexbox",
    "desc": "Flexbox, esnek kutu modeli kullanarak bir HTML öğesi içindeki öğelerin yerleştirilmesini ve hizalanmasını yöneten bir CSS özelliğidir. Flexbox, öğelerin yatay veya dikey olarak hizalanmasını ve öğeler arasındaki boşluğu yönetmek için kullanılabilir.",
    "example": {
      "codeBlock": "/* Öğeleri yatay olarak hizalamak için flexbox özelliği kullanılabilir. */\n.container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.container > div {\n  margin: 10px;\n}"
    }
  },
  {
    "id": 28,
    "category": ["CSS"],
    "term": "Media Queries",
    "desc": "Media Queries, belirli ekran boyutları veya cihaz özellikleri gibi koşullar için farklı CSS kuralları belirleyerek duyarlı web tasarımı yapmayı mümkün kılan bir CSS özelliğidir.",
    "example": {
      "codeBlock": "/* Ekran genişliği 600 pikselin altındaysa metin rengini değiştir. */\n@media (max-width: 600px) {\n  body {\n    color: red;\n  }\n}"
    }
  },
  {
    "id": 29,
    "category": ["CSS", "HTML"],
    "term": "Selectors",
    "desc": "Selectors, belirli HTML öğelerini veya özelliklerini seçerek stil uygulamak için kullanılan CSS özellikleridir. ID'ler, sınıflar, özellikler, yavrular, kardeşler ve daha birçok seçici türü vardır.",
    "example": {
      "codeBlock": "/* Sınıf seçicisi kullanarak belirli bir öğeye stil uygulayın. */\n.my-class {\n  font-weight: bold;\n}"
    }
  },
  {
    "id": 30,
    "category": ["CSS"],
    "term": "Transitions",
    "desc": "Transitions, belirli bir öğenin belirli bir özelliğinde (genellikle renk veya boyut gibi) bir değişiklik olduğunda, değişikliğin düzenli ve yumuşak bir şekilde gerçekleşmesini sağlayan bir CSS özelliğidir.",
    "example": {
      "codeBlock": "/* Renk değişimini yavaşça gerçekleştirmek için transition özelliği kullanılabilir. */\nbutton {\n  background-color: red;\n  transition: background-color 0.5s ease;\n}\n\nbutton:hover {\n  background-color: blue;\n}"
    }
  },
  {
    "id": 31,
    "category": ["CSS"],
    "term": "Transforms",
    "desc": "Transforms, bir HTML öğesinin boyutunu, şeklini, konumunu ve oryantasyonunu değiştirmek için kullanılan bir CSS özelliğidir. Döndürme, ölçeklendirme, eğimleme ve konumlandırma gibi birçok değişiklik yapılabilir.",
    "example": {
      "codeBlock": "/* Bir div öğesini döndürmek için transform özelliği kullanılabilir. */\ndiv {\n  transform: rotate(45deg);\n}"
    }
  },
  {
    "id": 32,
    "category": ["CSS"],
    "term": "Grid",
    "desc": "Grid, bir HTML öğesinin içindeki öğeleri satır ve sütunlar halinde yerleştirmek ve hizalamak için kullanılan bir CSS özelliğidir. Grid, Flexbox'tan daha karmaşık yerleştirme işlemleri yapmak için kullanılabilir.",
    "example": {
      "codeBlock": "/* Öğeleri bir 2x2 kare oluşturacak şekilde yerleştirmek için grid özelliği kullanılabilir. */\n.container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  gap: 10px;\n}\n\n.container > div {\n  background-color: lightblue;\n}"
    }
  },
  {
    "id": 33,
    "category": ["Git"],
    "term": "Merge",
    "desc": "Git versiyon kontrol sisteminde iki veya daha fazla branch'i birleştirmek için kullanılan bir işlemdir. Bu işlem, değişikliklerin kaynak kodu deposundaki ana branch'e dahil edilmesini sağlar.",
    "example": {
      "codeBlock": "git merge feature-branch"
    }
  },
  {
    "id": 34,
    "category": ["Web Development"],
    "term": "Webpack",
    "desc": "Webpack, bir JavaScript modül paketleme aracıdır. Bu araç, web uygulamaları için gerekli olan JavaScript, CSS ve diğer statik dosyaları paketler, birleştirir ve optimize eder.",
    "example": {
      "codeBlock": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n entry: './src/index.js',\n output: {\n path: path.resolve(__dirname, 'dist'),\n filename: 'bundle.js'\n },\n plugins: [new HtmlWebpackPlugin({\n template: './src/index.html'\n })],\n module: {\n rules: [\n {\n test: /.js$/,\n exclude: /node_modules/,\n use: {\n loader: 'babel-loader'\n } }, { test: /.css$/,\n use: ['style-loader','css-loader']}]}};"
    }
  },
  {
    "id": 35,
    "category": ["Web Development"],
    "term": "MVC",
    "desc": "Model-View-Controller, bir yazılım mimarisidir ve web geliştirme sürecinde kullanılır. Bu mimari, uygulamanın veri (Model), kullanıcı arayüzü (View) ve iş mantığının (Controller) birbirinden ayrılmasını sağlar.",
    "example": {
      "codeBlock": "public class StudentModel {\n private String name;\n private int age;\n //Getter and Setter methods\n}\n\npublic class StudentView {\n public void printStudentDetails(String name, int age) {\n System.out.println('Name: ' + name);\n System.out.println('Age: ' + age);\n }\n}\n\npublic class StudentController {\n private StudentModel model;\n private StudentView view;\n\n public StudentController(StudentModel model, StudentView view){\n this.model = model;\n this.view = view;\n }\n\n public void updateView(){\n view.printStudentDetails(model.getName(), model.getAge());\n }\n}"
    }
  },
  {
    "id": 36,
    "category": ["Web Development"],
    "term": "SPA",
    "desc": "Tek sayfa uygulaması (Single Page Application), kullanıcının web sayfasının farklı bölümlerine erişirken sayfayı yeniden yüklemeden yalnızca değişen verileri yükleyen bir web uygulamasıdır.",
    "example": {
      "codeBlock": "const App = () => {\n return (\n <div>\n <Header />\n <Main />\n <Footer />\n </div>\n );\n};"
    }
  },
  {
    "id": 37,
    "category": ["Web Development", "JavaScript"],
    "term": "Gulp",
    "desc": "Gulp, JavaScript tabanlı bir yapım aracıdır. Bu araç, web geliştiricilerinin proje için özelleştirilmiş iş akışlarını otomatikleştirmelerine ve kolaylaştırmalarına olanak tanır.",
    "example": {
      "codeBlock": "const gulp = require('gulp');\nconst sass = require('gulp-sass');\n\nfunction compileSass() {\n return gulp\n .src('./src/scss/**/*.scss')\n .pipe(sass())\n .pipe(gulp.dest('./dist/css'));\n}\n\ngulp.task('sass', compileSass);\n\ngulp.task('default', gulp.series('sass'));"
    }
  },
  {
    "id": 38,
    "category": ["Web Development", "JavaScript"],
    "term": "ESLint",
    "desc": "ESLint, JavaScript kodlarının stil ve hata denetimini otomatikleştiren bir araçtır. Bu araç, kodun okunabilirliğini ve bakımını kolaylaştırır ve hataları erken aşamada tespit ederek geliştirme sürecini hızlandırır.",
    "example": {
      "codeBlock": "module.exports = {\n env: {\n browser: true,\n es2021: true\n },\n extends: [\n 'eslint:recommended',\n 'plugin:react/recommended'\n ],\n parserOptions: {\n ecmaFeatures: {\n jsx: true\n },\n ecmaVersion: 12,\n sourceType: 'module'\n },\n plugins: ['react'],\n rules: {\n 'react/prop-types': 'off',\n 'no-unused-vars': 'warn'\n }\n};"
    }
  },
  {
    "id": 39,
    "category": ["Web Development", "Internet"],
    "term": "HTTPS",
    "desc": "HTTPS, İnternet üzerinden veri iletiminde güvenliği sağlamak için kullanılan bir protokoldür. Bu protokol, verilerin şifrelenmesi ve doğrulanması için SSL veya TLS gibi güvenlik protokolleri kullanır.",
    "example": {
      "codeBlock": "https://www.example.com"
    }
  },
  {
    "id": 40,
    "category": ["Web Development", "Internet"],
    "term": "DNS",
    "desc": "Alan adı sistemleri (DNS), İnternet adreslerini (IP adresleri) insanların anlayabileceği isimlere dönüştürmek için kullanılan bir sistemdir. Bu sistem, web sitelerine erişmek için kullanılan adreslerin yönetimini sağlar.",
    "example": {
      "codeBlock": "www.example.com"
    }
  },
  {
    "id": 41,
    "category": ["Web Development"],
    "term": "Static Site Generation (SSG)",
    "desc": "Static Site Generation (SSG), web sitelerinin derlenerek, HTML, CSS ve JavaScript dosyaları şeklinde sunulduğu bir yöntemdir. SSG ile siteler hızlı bir şekilde yüklenebilir ve performansları artırılabilir. SSG, statik içerikli web siteleri için ideal bir seçenektir.",
    "example": {
      "codeBlock": "npm run build"
    }
  },
  {
    "id": 42,
    "category": ["Web Development"],
    "term": "CDN",
    "desc": "İçerik dağıtım ağı (CDN), statik içeriklerin dağıtımını kolaylaştırmak ve hızlandırmak için kullanılan bir ağdır. Bu ağ, sunucuların dünya genelindeki birçok konumda barındırılmasını sağlar.",
    "example": {
      "codeBlock": "<script src='https://cdn.example.com/jquery.min.js\"></script>"
    }
  },
  {
    "id": 43,
    "category": ["Git"],
    "term": "Push",
    "desc": "Git'te, yerel değişiklikleri uzak bir deposuna göndermek için kullanılan bir komuttur. Bu işlem, yerel değişikliklerin uzak bir depoda saklanmasını, diğer kullanıcıların bu değişiklikleri görebilmesini ve işbirliği yapmalarını sağlar.",
    "example": {
      "codeBlock": "git push origin master"
    }
  },
  {
    "id": 44,
    "category": ["Git"],
    "term": "Pull",
    "desc": "Git'te, uzak bir depodaki değişiklikleri yerel bir depoya çekmek için kullanılan bir komuttur. Bu işlem, yerel depoda bulunmayan değişikliklerin alınmasını ve birleştirilmesini sağlar.",
    "example": {
      "codeBlock": "git pull origin master"
    }
  },
  {
    "id": 45,
    "category": ["Git"],
    "term": "Branch",
    "desc": "Git'te, bağımsız bir kod parçası oluşturmak için kullanılan bir kavramdır. Bu kavram, birden çok geliştiricinin aynı projede çalışmasını sağlar ve her geliştiricinin kendi kod parçasını ayrı bir dalda tutmasını mümkün kılar.",
    "example": {
      "codeBlock": "git branch feature-branch"
    }
  },
  {
    "id": 46,
    "category": ["Git"],
    "term": "Repository",
    "desc": "Git'te, projenin tüm sürüm geçmişini ve dosyalarını içeren depodur. Bu depo, yerel bir bilgisayarda veya bir web sunucusunda barındırılabilir.",
    "example": {
      "codeBlock": "git clone https://github.com/example/repository.git"
    }
  },
  {
    "id": 47,
    "category": ["Git"],
    "term": "Commit",
    "desc": "Git'te, değişiklikleri yerel bir depoya kaydetmek için kullanılan bir komuttur. Bu işlem, değişikliklerin tarihçesini ve açıklamasını tutar ve projenin belirli bir noktasına geri dönülebilmesini sağlar.",
    "example": {
      "codeBlock": "git commit -m 'Add new feature'"
    }
  },
  {
    "id": 48,
    "category": ["Package Managers"],
    "term": "npm",
    "desc": "npm (Node Package Manager), Node.js için açık kaynaklı bir paket yöneticisidir. npm, Node.js topluluğu tarafından oluşturulmuştur ve paketlerin indirilmesi, yüklenmesi ve yönetimi için kullanılır.",
    "example": {
      "codeBlock": "npm install lodash"
    }
  },
  {
    "id": 49,
    "category": ["Package Managers"],
    "term": "yarn",
    "desc": "yarn, Facebook tarafından oluşturulan açık kaynaklı bir paket yöneticisidir. npm'e benzer şekilde çalışır ve daha hızlı ve güvenilir paket yükleme ve yönetim özellikleri sunar.",
    "example": {
      "codeBlock": "yarn add lodash"
    }
  },
  {
    "id": 50,
    "category": ["Package Managers"],
    "term": "pnpm",
    "desc": "pnpm, Node.js için açık kaynaklı bir paket yöneticisidir. npm ve yarn'a benzer şekilde çalışır ve özellikle disk alanı tasarrufu sağlayan bir özelliğe sahiptir. Ayrıca, birden fazla proje için paylaşılan bağımlılıkların tek bir yerde saklanmasını sağlar.",
    "example": {
      "codeBlock": "pnpm install lodash"
    }
  },
  {
    "id": 51,
    "category": ["Web Development"],
    "term": "API",
    "desc": "API (Application Programming Interface), yazılım uygulamaları arasında veri alışverişi yapmak için kullanılan bir arayüzdür. İki farklı uygulama arasında bilgi alışverişi yapmak için standartlaştırılmış bir yol sağlar.",
    "example": {
      "codeBlock": "fetch('https://api.example.com/data')"
    }
  },
  {
    "id": 52,
    "category": ["Web Development"],
    "term": "SSL",
    "desc": "SSL (Secure Sockets Layer), internet bağlantılarının güvenli hale getirilmesi için kullanılan bir protokoldür. SSL sertifikaları, kullanıcının güvenli bir web sitesine bağlandığını ve bilgilerinin şifrelendiğini doğrular.",
    "example": {
      "codeBlock": "https://www.example.com"
    }
  },
  {
    "id": 53,
    "category": ["JavaScript", "Web Development"],
    "term": "Fetch",
    "desc": "Fetch, web tarayıcıları tarafından sunulan bir JavaScript API'sidir ve HTTP isteklerinin yapılmasını sağlar. Fetch API, XMLHttpRequest API'sine alternatif olarak kullanılabilir ve modern web uygulamaları için daha iyi bir seçenek olabilir.",
    "example": {
      "codeBlock": "fetch('https://api.example.com/data')"
    }
  },
  {
    "id": 54,
    "category": ["CSS"],
    "term": "SASS",
    "desc": "SASS (Syntactically Awesome Style Sheets), CSS stil dosyaları oluşturmak için kullanılan bir CSS ön işlemcisi dilidir. SASS, daha kolay ve hızlı bir şekilde CSS yazmanıza olanak tanır ve CSS kodunun yeniden kullanılabilirliğini artırır.",
    "example": {
      "codeBlock": "$primary-color: #333;\n\nbody {\n background-color: $primary-color;\n}"
    }
  },
  {
    "id": 55,
    "category": ["HTML", "CSS"],
    "term": "ID",
    "desc": "ID (Identifier), HTML ve CSS'de bir öğenin benzersiz bir kimliğini tanımlamak için kullanılan bir özniteliktir. Bir ID, sayfadaki yalnızca bir öğeyi tanımlayabilir ve öğenin bir kimliği olduğu sürece diğer öğelerden ayırt edilir.",
    "example": {
      "codeBlock": "<div id='header'>Header</div>"
    }
  },
  {
    "id": 56,
    "category": ["Web Development"],
    "term": "WebSockets",
    "desc": "WebSockets, istemci ve sunucu arasında tam çift yönlü iletişim sağlayan bir ağ protokolüdür. Bu protokol, sürekli bağlantı kurarak veri alışverişi yapmanızı sağlar ve gerçek zamanlı uygulamalar için idealdir.",
    "example": {
      "codeBlock": "const socket = new WebSocket('wss://ornek.com');\n\nsocket.onopen = function() {\n  console.log('Bağlantı açıldı');\n};\n\nsocket.onmessage = function(event) {\n  console.log('Alınan mesaj: ' + event.data);\n};\n\nsocket.onclose = function() {\n  console.log('Bağlantı kapandı');\n};"
    }
  },
  {
    "id": 57,
    "category": ["Web Development"],
    "term": "SSL",
    "desc": "SSL (Secure Sockets Layer), veri iletişiminde güvenliği sağlamak için kullanılan bir kriptografik protokoldür. Bu protokol, veri iletişiminde şifreleme, kimlik doğrulama ve bütünlük sağlar.",
    "example": {
      "codeBlock": ""
    }
  },
  {
    "id": 58,
    "category": ["Web Development"],
    "term": "AJAX",
    "desc": "AJAX, sayfa yeniden yüklenmeden web sayfaları aracılığıyla sunucu ile iletişim kurmayı sağlayan bir teknolojidir.",
    "example": {
      "codeBlock": "const xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/api/data', true);\nxhr.onload = function() {\n  if (this.status === 200) {\n    const data = JSON.parse(this.responseText);\n    console.log(data);\n  }\n};\nxhr.send();"
    }
  },
  {
    "id": 59,
    "category": ["Web Development"],
    "term": "RESTful API",
    "desc": "RESTful API, temel HTTP protokolünü kullanarak web servislerine erişim sağlamak için kullanılan bir arayüzdür.",
    "example": {
      "codeBlock": "app.get('/api/users', function(req, res) {\n  const users = [\n    { id: 1, name: 'John Doe' },\n    { id: 2, name: 'Jane Smith' }\n  ];\n  res.json(users);\n});"
    }
  },
  {
    "id": 60,
    "category": ["Web Development", "JavaScript"],
    "term": "Node.js",
    "desc": "Node.js, JavaScript ile sunucu tarafı uygulama geliştirme için kullanılan bir çalıştırma ortamıdır.",
    "example": {
      "codeBlock": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!');\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
    }
  },
  {
    "id": 61,
    "category": ["JavaScript"],
    "term": "JSON",
    "desc": "JSON (JavaScript Object Notation), verileri okunaklı ve hafif bir format kullanarak depolamak, göndermek ve almak için kullanılan bir veri değişim formatıdır.",
    "example": {
      "codeBlock": "{\n 'name': 'John',\n 'age': 30,\n 'city': 'New York'\n}"
    }
  },
  {
    "id": 62,
    "category": ["HTML"],
    "term": "Anchor",
    "desc": "HTML'de <a> etiketi, bir metni veya resmi tıklanabilir bir bağlantıya dönüştürmek için kullanılır. Genellikle başka bir sayfaya, belirli bir bölüme veya bir e-posta adresine yönlendirmek için kullanılır.",
    "example": {
      "codeBlock": "<a href=\"https://www.google.com/\">Google'a git</a>"
    }
  },
  {
    "id": 63,
    "category": ["HTML", "CSS"],
    "term": "Attribute",
    "desc": "HTML'de öğelerin özelliklerini belirleyen özniteliklerdir. Örneğin, bir <img> etiketi için 'src' özniteliği, resmin kaynak dosyasını belirtir.",
    "example": {
      "codeBlock": "<img src=\"resim.jpg\" alt=\"Bir resim\" width=\"300\" height=\"200\">"
    }
  },
  {
    "id": 64,
    "category": ["JavaScript"],
    "term": "Property",
    "desc": "JavaScript'te, nesnelerin özellikleri olarak adlandırılan değerlerdir. Örneğin, bir HTML öğesi için 'innerHTML' özelliği, öğenin içeriğini belirtir.",
    "example": {
      "codeBlock": "document.getElementById('demo').innerHTML = 'Merhaba Dünya';"
    }
  },
  {
    "id": 65,
    "category": ["Web Development"],
    "term": "Server-Side Rendering (SSR)",
    "desc": "Server-Side Rendering (SSR), web sayfalarının sunucu tarafında oluşturulması ve hazırlanması işlemidir. Bu işlemde, sunucu sayfa içeriğini hazırlayarak tarayıcıya gönderir. Bu sayede, sayfa içeriği tarayıcıda işlemci yükünü hafifletir ve kullanıcıya daha hızlı yükleme süresi sağlar.",
    "example": {
      "codeBlock": "const express = require('express');\nconst ReactDOMServer = require('react-dom/server');\nconst App = require('./App');\n\nconst app = express();\n\napp.get('/', (req, res) => {\n const html = ReactDOMServer.renderToString(\n <App />\n );\n res.send(\n <html>\n <body>\n <div id='app'>${html}</div>\n <script src='/app.js'></script>\n </body>\n </html>);\n});"
    }
  },
  {
    "id": 66,
    "category": ["Web Development"],
    "term": "Progressive Web Applications (PWA)",
    "desc": "Progressive Web Applications (PWA), web uygulamalarının mobil uygulamalar gibi çalışmasını sağlayan bir teknolojidir. PWA, hızlı yükleme süreleri, offline desteği ve uygulama benzeri bir arayüz sunar. PWA, responsive tasarım ile birlikte kullanıldığında, web uygulamalarının mobil cihazlar için daha kullanışlı hale gelmesini sağlar.",
    "example": {
      "codeBlock": "manifest.json"
    }
  },
  {
    "id": 67,
    "category": ["React", "Web Development"],
    "term": "Redux",
    "desc": "Bir JavaScript kütüphanesi olan Redux, React uygulamaları için kullanılan bir durum yönetim aracıdır. Uygulama durumunu merkezi bir depoda saklar ve durum değişikliklerini yönetir.",
    "example": {
      "codeBlock": "const ADD_TODO = 'ADD_TODO'\n\nfunction addTodo(text) {\n return {\n type: ADD_TODO,\n text\n }\n}\n\n"
    }
  },
  {
    "id": 68,
    "category": ["Web Development"],
    "term": "GraphQL",
    "desc": "GraphQL, bir API sorgulama dili ve çalıştırma ortamıdır. Geleneksel RESTful API'lerin yerini alabilir ve daha esnek ve verimli bir API sağlayabilir.",
    "example": {
      "codeBlock": "query {\n user(id: 1) {\n name\n email\n }\n}"
    }
  },
  {
    "id": 69,
    "category": ["Web Development"],
    "term": "Accessibility",
    "desc": "Web sitelerinin ve uygulamaların, herkesin kullanabileceği şekilde tasarlanması ve geliştirilmesidir. Özellikle, engelli kullanıcıların ihtiyaçlarına yönelik olarak tasarlanmalıdır.",
    "example": {
      "codeBlock": "<button aria-label='Close menu'>X</button>"
    }
  },
  {
    "id": 70,
    "category": ["CSS", "Web Development"],
    "term": "Block Element Model (BEM)",
    "desc": "CSS yöntemleriyle tasarlanmış bir web tasarım yaklaşımıdır. Bu yaklaşım, web sitelerinin ve uygulamalarının modüler hale getirilmesine olanak tanır ve stil sayfalarının kolay yönetimini sağlar.",
    "example": {
      "codeBlock": ".block__element--modifier {}"
    }
  },
  {
    "id": 71,
    "category": ["Web Development"],
    "term": "Microservices",
    "desc": "Bir uygulamanın küçük, özerk hizmetlere bölünmesiyle oluşturulan bir mimaridir. Bu, uygulamaların daha ölçeklenebilir, esnek ve bakımı kolay hale getirilmesine olanak tanır.",
    "example": {
      "codeBlock": "docker run -p 8080:8080 my-microservice"
    }
  },
  {
    "id": 72,
    "category": ["Web Development"],
    "term": "Containerization",
    "desc": "Yazılım uygulamalarının, kendi kendine yeterli bir ortamda çalışmasını sağlamak için bir işletim sistemi sanalizasyon tekniğidir. Özellikle DevOps ve dağıtım süreçlerinde kullanılır.",
    "example": {
      "codeBlock": "docker build -t my-app ."
    }
  },
  {
    "id": 73,
    "category": ["Web Development", "React", "Vue.js"],
    "term": "Vite",
    "desc": "Vite, modern web uygulamaları oluşturmak için kullanılan bir geliştirici aracıdır. Vue.js ve React gibi popüler JavaScript çerçeveleri ile uyumlu olan Vite, geliştirme sunucusu, hızlı derleme zamanı ve modüler mimari gibi özelliklerle gelir.",
    "example": {
      "codeBlock": "import { createServer } from 'vite'\n\nconst server = await createServer()\nawait server.listen()"
    }
  },
  {
    "id": 74,
    "category": ["Web Development"],
    "term": "Unit Test",
    "desc": "Unit Test, bir yazılım parçasının (genellikle bir fonksiyon veya sınıf) beklenen davranışı gösterip göstermediğini doğrulayan otomatik testlerdir.",
    "example": {
      "codeBlock": "function sum(a, b) {\n  return a + b;\n}\n\ndescribe('sum function', () => {\n  it('should return the sum of two numbers', () => {\n    expect(sum(1, 2)).toBe(3);\n    expect(sum(2, 2)).toBe(4);\n    expect(sum(0, 0)).toBe(0);\n  });\n});"
    }
  }
]
